const get = require('lodash.get');

const { isJsonString } = require('./common');
const { color, getSeverityBgColor } = require('./color');
const { printExceptionReport } = require('./print');

/**
 * Converts an audit level to a numeric value
 * @param  {String} auditLevel  Audit level
 * @return {Number}             Numberic level: the higher the number, the more severe it is
 */
function mapLevelToNumber(auditLevel) {
  switch (auditLevel) {
    case 'info':
      return 0;
    case 'low':
      return 1;
    case 'moderate':
      return 2;
    case 'high':
      return 3;
    case 'critical':
      return 4;
    default:
      return 0;
  }
}

/**
 * Analyze the JSON string buffer
 * @param  {String} jsonBuffer      NPM Audit JSON string buffer
 * @param  {String} auditLevel      User's target audit level
 * @param  {Array} exceptionIds     User's exception IDs
 * @return {Object}                 Processed vulnerabilities details
 */
function processAuditJson(jsonBuffer = '', auditLevel = 'info', exceptionIds = []) {
  if (!isJsonString(jsonBuffer)) {
    return {};
  }
  // NPM v6 uses `advisories`
  // NPM v7 uses `vulnerabilities`
  // Refer to the `test/__mocks__` folder for some sample mockups
  const { advisories, vulnerabilities } = JSON.parse(jsonBuffer);

  // NPM v6 handling
  if (advisories) {
    return Object.values(advisories).reduce((acc, cur) => {
      const shouldAudit = mapLevelToNumber(cur.severity) >= mapLevelToNumber(auditLevel);
      const isExcepted = exceptionIds.includes(cur.id);

      // Record this vulnerability into the report, and highlight it using yellow color if it's new
      acc.report.push([
        color(cur.id, isExcepted ? '' : 'yellow'),
        color(cur.module_name, isExcepted ? '' : 'yellow'),
        color(cur.title, isExcepted ? '' : 'yellow'),
        color(cur.severity, isExcepted ? '' : 'yellow', getSeverityBgColor(cur.severity)),
        color(cur.url, isExcepted ? '' : 'yellow'),
        isExcepted ? 'y' : color('n', 'yellow'),
      ]);

      acc.vulnerabilityIds.push(cur.id);

      // Found unhandled vulnerabilites
      if (shouldAudit && !isExcepted) {
        acc.unhandledIds.push(cur.id);
      }

      return acc;
    },
    {
      unhandledIds: [],
      vulnerabilityIds: [],
      report: [],
    });
  }

  // NPM v7 handling
  if (vulnerabilities) {
    return Object.values(vulnerabilities).reduce((acc, cur) => {
      // Inside `via` array, its either the related module name or the vulnerability source object.
      get(cur, 'via', []).forEach(vul => {
        // The vulnerability ID is labeled as `source`
        const id = get(vul, 'source');

        // Let's skip if ID is a string (module name), and only focus on the root vulnerabilities
        if (!id || typeof id === 'string') {
          return;
        }

        const shouldAudit = mapLevelToNumber(vul.severity) >= mapLevelToNumber(auditLevel);
        const isExcepted = exceptionIds.includes(id);

        // Record this vulnerability into the report, and highlight it using yellow color if it's new
        acc.report.push([
          color(id, isExcepted ? '' : 'yellow'),
          color(vul.name, isExcepted ? '' : 'yellow'),
          color(vul.title, isExcepted ? '' : 'yellow'),
          color(vul.severity, isExcepted ? '' : 'yellow', getSeverityBgColor(vul.severity)),
          color(vul.url, isExcepted ? '' : 'yellow'),
          isExcepted ? 'y' : color('n', 'red'),
        ]);

        acc.vulnerabilityIds.push(id);

        // Found unhandled vulnerabilites
        if (shouldAudit && !isExcepted) {
          acc.unhandledIds.push(id);
        }
      });

      return acc;
    },
    {
      unhandledIds: [],
      vulnerabilityIds: [],
      report: [],
    });
  }
  return {};
}

/**
 * Process all exceptions and return a list of exception IDs
 * @param {Object} nsprc          File content from `.nsprc`
 * @param {Array} cmdExceptions   Exceptions passed in via command line
 * @return {Array}                List of found vulnerabilities
 */
function getExceptionsIds(nsprc, cmdExceptions = []) {
  // If file does not exists
  if (!nsprc || typeof nsprc !== 'object') {
    // If there are exceptions passed in from command line
    if (cmdExceptions.length) {
      // Display simple info
      console.info(`Exception IDs: ${cmdExceptions.join(', ')}`);
      return cmdExceptions;
    }

    return [];
  }

  // Process the content of the file along with the command line exceptions
  const { exceptionIds, report } = processExceptions(nsprc, cmdExceptions);

  printExceptionReport(report);

  return exceptionIds;
}

/**
 * Filter the given list in the `.nsprc` file for valid exceptions
 * @param {Object} nsprc          The nsprc file content, contains exception info
 * @param {Array} cmdExceptions   Exceptions passed in via command line
 * @return {Object}               Processed vulnerabilities details
 */
function processExceptions(nsprc, cmdExceptions = []) {
  return Object.entries(nsprc).reduce((acc, [id, details]) => {
    const numberId = Number(id);
    const isValidId = !isNaN(numberId);
    const isActive = Boolean(get(details, 'active', true)); // default to true
    const expiryDate = get(details, 'expiry') ? new Date(details.expiry).toUTCString() : '';
    const hasExpired = get(details, 'expiry') ? details.expiry < new Date(Date.now()).getTime() : false;
    const notes = typeof details === 'string' ? details : get(details, 'notes', '');

    let status = color('active', 'green');
    if (hasExpired) {
      status = color('expired', 'red');
    } else if (!isValidId) {
      status = color('invalid', 'red');
    } else if (!isActive) {
      status = color('inactive', 'yellow');
    }

    acc.report.push([id, status, expiryDate, notes]);

    if (isValidId && isActive && !hasExpired) {
      acc.exceptionIds.push(numberId);
    }

    return acc;
  },
  {
    exceptionIds: cmdExceptions,
    report: cmdExceptions.map(id => [String(id), color('active', 'green'), '', '']),
  });
}

module.exports = {
  mapLevelToNumber,
  getExceptionsIds,
  processAuditJson,
  processExceptions,
};
